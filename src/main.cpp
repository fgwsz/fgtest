#include<test/test.hpp>
#include<stdexcept>//::std::runtime_error
TEST_CASE(check_passed){
    TEST_CHECK(1==1);
    TEST_CHECK(2!=1);
    TEST_CHECK(2>1);
    TEST_CHECK(2>=1);
    TEST_CHECK(2>=2);
    TEST_CHECK(1<2);
    TEST_CHECK(1<=2);
    TEST_CHECK(1<=1);
    TEST_CHECK_OP(==,1,1);
    TEST_CHECK_OP(!=,2,1);
    TEST_CHECK_OP(>,2,1);
    TEST_CHECK_OP(>=,2,1);
    TEST_CHECK_OP(>=,2,2);
    TEST_CHECK_OP(<,1,2);
    TEST_CHECK_OP(<=,1,2);
    TEST_CHECK_OP(<=,1,1);
    TEST_CHECK_EQ(1,1);
    TEST_CHECK_NE(2,1);
    TEST_CHECK_GT(2,1);
    TEST_CHECK_GE(2,1);
    TEST_CHECK_GE(2,2);
    TEST_CHECK_LT(1,2);
    TEST_CHECK_LE(1,2);
    TEST_CHECK_LE(1,1);
}
TEST_CASE(check_failed){
    TEST_CHECK(!(1==1));
    TEST_CHECK(!(2!=1));
    TEST_CHECK(!(2>1));
    TEST_CHECK(!(2>=1));
    TEST_CHECK(!(2>=2));
    TEST_CHECK(!(1<2));
    TEST_CHECK(!(1<=2));
    TEST_CHECK(!(1<=1));
    TEST_CHECK_OP(==,2,1);
    TEST_CHECK_OP(!=,1,1);
    TEST_CHECK_OP(>,2,2);
    TEST_CHECK_OP(>=,1,2);
    TEST_CHECK_OP(<,1,1);
    TEST_CHECK_OP(<=,2,1);
    TEST_CHECK_EQ(2,1);
    TEST_CHECK_NE(1,1);
    TEST_CHECK_GT(2,2);
    TEST_CHECK_GE(1,2);
    TEST_CHECK_LT(1,1);
    TEST_CHECK_LE(2,1);
}
TEST_CASE(assert_passed){
    TEST_ASSERT(1==1);
    TEST_ASSERT(2!=1);
    TEST_ASSERT(2>1);
    TEST_ASSERT(2>=1);
    TEST_ASSERT(2>=2);
    TEST_ASSERT(1<2);
    TEST_ASSERT(1<=2);
    TEST_ASSERT(1<=1);
    TEST_ASSERT_OP(==,1,1);
    TEST_ASSERT_OP(!=,2,1);
    TEST_ASSERT_OP(>,2,1);
    TEST_ASSERT_OP(>=,2,1);
    TEST_ASSERT_OP(>=,2,2);
    TEST_ASSERT_OP(<,1,2);
    TEST_ASSERT_OP(<=,1,2);
    TEST_ASSERT_OP(<=,1,1);
    TEST_ASSERT_EQ(1,1);
    TEST_ASSERT_NE(2,1);
    TEST_ASSERT_GT(2,1);
    TEST_ASSERT_GE(2,1);
    TEST_ASSERT_GE(2,2);
    TEST_ASSERT_LT(1,2);
    TEST_ASSERT_LE(1,2);
    TEST_ASSERT_LE(1,1);
}
TEST_CASE(assert_failed){
    TEST_CHECK(1==1);
    TEST_CHECK(2!=1);
    TEST_ASSERT(!(1==1));
    //TEST_ASSERT(!(2!=1));
    //TEST_ASSERT(!(2>1));
    //TEST_ASSERT(!(2>=1));
    //TEST_ASSERT(!(2>=2));
    //TEST_ASSERT(!(1<2));
    //TEST_ASSERT(!(1<=2));
    //TEST_ASSERT(!(1<=1));
    //TEST_ASSERT_OP(==,2,1);
    //TEST_ASSERT_OP(!=,1,1);
    //TEST_ASSERT_OP(>,2,2);
    //TEST_ASSERT_OP(>=,1,2);
    //TEST_ASSERT_OP(<,1,1);
    //TEST_ASSERT_OP(<=,2,1);
    //TEST_ASSERT_EQ(2,1);
    //TEST_ASSERT_NE(1,1);
    //TEST_ASSERT_GT(2,2);
    //TEST_ASSERT_GE(1,2);
    //TEST_ASSERT_LT(1,1);
    //TEST_ASSERT_LE(2,1);
}
TEST_CASE(c_str_exception){
    throw "c_str exception";
}
TEST_CASE(string_exception){
    throw "string exception";
}
TEST_CASE(std_exception){
    throw ::std::runtime_error{"std::exception"};
}
TEST_CASE(unknown_exception){
    struct Foo{};
    throw Foo{};
}
TEST_CASE(empty_c_str_exception){
    throw "";
}
TEST_CASE(empty_string_exception){
    throw ::std::string{""};
}
TEST_CASE(empty_std_exception){
    throw ::std::runtime_error{""};
}
int main(int argc,char* argv[]){
    ::test::execute();
    ::test::execute("check_passed");
    ::test::execute("undefined");
    return 0;
}
